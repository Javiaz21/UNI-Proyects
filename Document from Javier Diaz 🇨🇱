#Javier Ignacio Díaz López 220839937
#Saul Alejandro Ayala Alanis 220976969

import cv2
from cv2 import aruco
import numpy as np
import pickle

marker_dict = aruco.getPredefinedDictionary(aruco.DICT_4X4_50)
param_markers = aruco.DetectorParameters()
detector = aruco.ArucoDetector(marker_dict, param_markers)

model = pickle.load(open('Act_8_deteccion_numerica.sav','rb'))

cap = cv2.VideoCapture(0)

while True:
    
    ret,frame = cap.read()
    
    if not ret:
        break
    
    gray=cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    marker_corners, marker_IDs, reject = detector.detectMarkers(gray)


    #print(marker_corners)
    #print(marker_IDs)
    #print(reject)

    if marker_corners:
        for ids, corners in zip(marker_IDs, marker_corners):
            corners=corners.astype(np.int32)
            cv2.polylines(frame, [corners], True, (0,255,255),4,cv2.LINE_AA)
            cv2.circle(frame, corners[0,0], radius=5, color=(0, 0, 255), thickness=-1)
            cv2.circle(frame, corners[0,1], radius=5, color=(0, 255, 0), thickness=-1)
            cv2.circle(frame, corners[0,2], radius=5, color=(255, 0, 0), thickness=-1)
            cv2.circle(frame, corners[0,3], radius=5, color=(0, 255, 255), thickness=-1)
            topleft=corners[0,0]
            topright=corners[0,1]
            botleft=corners[0,2]
            botright=corners[0,3]
            gradient=abs(topleft[1]-topright[1])
            if gradient > 7:
                cv2.polylines(frame, [corners], True, (0,0,255),7,cv2.LINE_AA)
                cv2.putText(frame,"Enderesese pvto",topright,cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,255),1,cv2.LINE_AA)

            d = 2*(abs(botleft[0]-botright[0]))

            number = frame[botleft[1]:botleft[1]+d,botleft[0]:botleft[0]+d]

            frame = cv2.rectangle(frame, botleft, (botleft[0]+d,botleft[1]+d), (0,255,0), 2)
            
            number = cv2.cvtColor(number,cv2.COLOR_BGR2GRAY)
            _ , number = cv2.threshold(number,100,255,cv2.THRESH_BINARY_INV)
            number = cv2.resize(number,(28,28))
            
            pattern = number.reshape(1,784)

            num_p = pattern.reshape(-1,1)
        
            data = [float(j) for j in num_p]
            data_array = np.asanyarray(data)    
            y = model.predict(data_array.reshape(-1,784))
        
            print('Numero: ', y)

            number = cv2.resize(number,(100,100))

            cv2.imshow("Cuadro",number)
    
    cv2.imshow("Cámara", frame)
    
    if cv2.waitKey(1) == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()